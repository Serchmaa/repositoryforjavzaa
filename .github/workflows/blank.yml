# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client

      - name: Run simple Python script
        run: |
          echo "print('Hello, World!')" > simple_script.py
          python simple_script.py

      - name: Write to Google Drive
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
          FILE_ID: ${{ secrets.FILE_ID }}
        run: |
          echo "import os
          import time
          from google.oauth2.credentials import Credentials
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload, MediaIoBaseDownload
          import io

          def write_to_file():
            creds = Credentials(
                None,
                refresh_token=os.getenv('REFRESH_TOKEN'),
                token_uri='https://oauth2.googleapis.com/token',
                client_id=os.getenv('CLIENT_ID'),
                client_secret=os.getenv('CLIENT_SECRET'),
            )
            drive_service = build('drive', 'v3', credentials=creds)
            file_metadata = {'name': 'testfile.txt', 'mimeType': 'text/plain'}
            
            # Check if the file exists
            results = drive_service.files().list(q='name=\"testfile.txt\" and mimeType=\"text/plain\"', spaces='drive', fields='files(id, name)').execute()
            items = results.get('files', [])

            content = f'Text written at {time.ctime()}\n'
            if not items:
              # Create a new file if it doesn't exist
              with open('testfile.txt', 'w') as f:
                  f.write(content)
              media = MediaFileUpload('testfile.txt', mimetype='text/plain')
              file = drive_service.files().create(body=file_metadata, media_body=media, fields='id').execute()
          else:
              # Append content to the existing file
              file_id = items[0]['id']
              
              # Download the existing content
              request = drive_service.files().get_media(fileId=file_id)
              file_data = io.BytesIO()
              downloader = MediaIoBaseDownload(file_data, request)
              done = False
              while not done:
                  status, done = downloader.next_chunk()
              
              # Append new content to the existing content
              existing_content = file_data.getvalue().decode('utf-8')
              new_content = existing_content + content
              with open('testfile.txt', 'w') as f:
                  f.write(new_content)
              
              media = MediaFileUpload('testfile.txt', mimetype='text/plain')
              drive_service.files().update(fileId=file_id, media_body=media).execute()
        
            # if not items:
            #     print('not items')
            #     # Create a new file if it doesn't exist
            #     media = drive_service.files().create(body=file_metadata, fields='id').execute()
            #     file_id = media.get('id')
            #     drive_service.files().update(fileId=file_id, media_body=content).execute()
            # else:
            #     # Append content to the existing file
            #     print('append content')
            #     file_id = items[0]['id']
            #     drive_service.files().update(fileId=file_id, media_body=content).execute()
            print(f'Text written at {time.ctime()} to testfile.txt')


          print('Hello there')
          write_to_file()
          print('file_id:')
          print(os.getenv('FILE_ID'))
          print('REFRESH_TOKEN:')
          print(os.getenv('REFRESH_TOKEN'))

          " > write_to_drive.py
          python write_to_drive.py

